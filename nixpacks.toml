[phases.setup]
nixPkgs = ["nodejs_20", "python3"]
aptPkgs = ["curl", "ca-certificates"]

[phases.install]
cmds = [
  # FORCE COMPLETE CACHE CLEAR - Railway cache bust v2025.08.03.001
  "echo 'FORCING COMPLETE CACHE INVALIDATION - Build ID: v2025.08.03.001'",
  "rm -rf node_modules/.cache || true",
  "rm -rf .cache || true", 
  "rm -rf /tmp/.npm || true",
  "rm -rf ~/.npm || true",
  "npm cache clean --force",
  "npm cache verify || true",
  "npm ci --cache /tmp/.npm --omit=dev --include=optional --no-fund --no-audit --prefer-offline",
  # Kill any existing esbuild services to prevent version mismatches
  "pkill -f 'esbuild.*service' || true",
  # Ensure correct esbuild binary for Linux x64
  "npm rebuild esbuild --platform=linux --arch=x64 || true",
  # Verify critical conversion component dependencies
  "npm list react react-dom @tanstack/react-query || true",
  "npm list @types/react @types/react-dom typescript || true",
  # Verify esbuild installation and force consistency
  "npm list esbuild @esbuild/linux-x64 || true",
  # AGGRESSIVELY force correct drizzle versions 
  "echo 'FORCING drizzle versions to prevent compatibility issues...'",
  "npm install drizzle-orm@0.44.4 drizzle-kit@0.31.4 --force --no-save || true",
  "npm install drizzle-orm@0.44.4 drizzle-kit@0.31.4 --force --save || true", 
  # Verify drizzle versions are correct
  "npm list drizzle-orm drizzle-kit || true",
  "echo 'Drizzle versions after force install:'",
  "cat node_modules/drizzle-orm/package.json | grep '\"version\"' || echo 'drizzle-orm not found'",
  "cat node_modules/drizzle-kit/package.json | grep '\"version\"' || echo 'drizzle-kit not found'",
  # Make our railway scripts executable
  "chmod +x scripts/railway-esbuild.js",
  "chmod +x scripts/railway-drizzle.js"
]

[phases.build]
cmds = [
  # FORCE FRESH BUILD - Railway cache bust v2025.08.03.001
  "echo 'FORCING FRESH BUILD - Cache Bust ID: v2025.08.03.001'",
  "rm -rf dist || true",
  "rm -rf .vite || true",
  "rm -rf node_modules/.vite || true",
  "echo 'Building optimized conversion components...'",
  # Kill any esbuild services from previous operations
  "pkill -f 'esbuild.*service' || true",
  # Wait a moment for services to fully terminate
  "sleep 1",
  # Verify esbuild binary works with correct version
  "npx esbuild --version || echo 'esbuild version check failed'",
  # Run TypeScript type checking in parallel
  "npm run check &",
  # Build client and server with optimization flags
  "npm run railway:build",
  # Verify build outputs
  "ls -la dist/",
  "ls -la dist/public/assets/ || true",
  # Calculate and log bundle sizes
  "du -sh dist/public/assets/*.js 2>/dev/null || echo 'No JS bundles found'",
  "du -sh dist/public/assets/*.css 2>/dev/null || echo 'No CSS bundles found'"
]

[variables]
# NPM Configuration for faster installs
NPM_CONFIG_CACHE = "/tmp/.npm"
NPM_CONFIG_UPDATE_NOTIFIER = "false"
NPM_CONFIG_FUND = "false" 
NPM_CONFIG_AUDIT = "false"
NPM_CONFIG_PROGRESS = "false"
NPM_CONFIG_PREFER_OFFLINE = "true"

# Node.js optimizations for TypeScript compilation
NODE_ENV = "production"
NODE_OPTIONS = "--max-old-space-size=4096 --enable-source-maps=false"

# TypeScript compilation optimizations
TS_NODE_TRANSPILE_ONLY = "true"
TS_NODE_SKIP_PROJECT = "true"

# Vite build optimizations for conversion components
VITE_BUILD_TARGET = "es2020"
VITE_BUILD_MINIFY = "esbuild"
VITE_BUILD_SOURCEMAP = "false"
VITE_BUILD_ROLLUP_INLINE_DYNAMIC_IMPORTS = "false"

# Esbuild optimizations for server bundle
ESBUILD_MINIFY = "true"
ESBUILD_SOURCEMAP = "false"
ESBUILD_TARGET = "node18"
ESBUILD_BINARY_PATH = "/app/node_modules/@esbuild/linux-x64/bin/esbuild"
# Prevent esbuild service conflicts
ESBUILD_SERVICE = "false"
ESBUILD_DISABLE_SERVICE = "true"
# Force esbuild to use binary instead of service
FORCE_COLOR = "0"
NO_COLOR = "1"

# Build performance monitoring
MEASURE_BUILD_TIME = "true"
# Force cache invalidation
BUILD_ID = "v2025.08.03.001"
CACHE_BUST_TIMESTAMP = "2025-08-03T00:00:00Z"
FORCE_FRESH_BUILD = "true"

[start]
cmd = "npm start"